<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>DHCP Leases Overview</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
  </head>
  <body>
    <table class="table table-dark table-striped table-hover">
      <thead>
        <tr>
          <th scope="col">IP Address</th>
          <th scope="col">Hostname</th>
          <th scope="col">MAC Address</th>
          <th scope="col">Expires in</th>
          <th scope="col">Type</th>
        </tr>
      </thead>
      <tbody id="body">
        <tr>
          <td scope="row" colspan="10">Loading...</td>
        </tr>
      </tbody>
    </table>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
    <script src="/luci-static/resources/cbi.js"></script>
    <script>
let leases

async function fetchLeases() {
	const res = await window.fetch('./json')
	leases = await res.json()
	renderLeases()
}

function h(tag, childrenOrText, props) {
	const el = document.createElement(tag);
	if (Array.isArray(childrenOrText)) {
		childrenOrText.forEach((child) => el.appendChild(child));
	} else if (typeof childrenOrText === 'string') {
		el.appendChild(document.createTextNode(childrenOrText));
	}

	if (props) {
		for (const key of Object.keys(props)) {
			el[key] = props[key];
		}
	}

	return el;
}

function now () {
	return Math.floor(Date.now() / 1000)
}

async function renderLeases() {
	if (!leases) return

	const v4 = leases.dhcp_leases.map(lease => {
		if (!lease.base_time) lease.base_time = now()

		return h('tr', [
			h('th', lease.ipaddr, { scope: 'row' }),
			h('td', lease.hostname),
			h('td', lease.macaddr),
			h('td',
				lease.expires === false ? h('em', 'unlimited') :
				lease.expires <= 0 ? h('em', 'expired') :
				'%t'.format(lease.expires - (now() - lease.base_time))
			),
			h('td', 'IPv4')
		])
	})

	const v6 = leases.dhcp6_leases.map(lease => {
		if (!lease.base_time) lease.base_time = now()

		return h('tr', [
			h('th', lease.ip6addrs ? lease.ip6addrs.join(' ') : lease.ip6add, { scope: 'row' }),
			h('td', lease.hostname),
			h('td', lease.macaddr),
			h('td',
				lease.expires === false ? h('em', 'unlimited') :
				lease.expires <= 0 ? h('em', 'expired') :
				'%t'.format(lease.expires - (now() - lease.base_time))
			),
			h('td', 'IPv6')
		])
	})

	const body = document.getElementById('body')
	body.innerHTML = ''

	for (const el of v4.concat(v6)) {
		body.appendChild(el)
	}
}

setInterval(renderLeases, 1000)
setInterval(fetchLeases, 10 * 1000)
fetchLeases()
    </script>
  </body>
</html>
